#!usr/bin/python
# -*- coding: UTF-8 -*-
# @Time    : 2020/03/20
# @Author  : 张晓平

import io
import os, json
from base64 import b64encode
from collections import Iterable
from datetime import datetime
from jinja2 import Template, escape



class ReportsOutput(object):
    def render_html_report(self, reports_path, summary, html_report_name=None):
        """
        :param summary: 数据
        :param html_report_name:  报告名称
        :return:
        """
        cur_path = os.path.abspath(os.path.dirname(__file__))
        html_report_template = os.path.join(
            os.path.split(cur_path)[0],
            "templates",
            "extent_report_template.html"
        )
        report_dir_path = os.path.join(reports_path, "reports")
        start_at_timestamp = int(summary["time"]["start_at"])
        summary["time"]["start_datetime"] = datetime.fromtimestamp(start_at_timestamp).strftime('%Y-%m-%d %H:%M:%S')
        if html_report_name:
            summary["html_report_name"] = html_report_name
            # 需要分类报告文件夹可在这边添加文件加路径
            report_dir_path = os.path.join(report_dir_path)
            html_report_name += ".html"
        else:
            summary["html_report_name"] = ""
            html_report_name = "{}.html".format(start_at_timestamp)

        if not os.path.isdir(report_dir_path):
            os.makedirs(report_dir_path)

        for index, suite_summary in enumerate(summary["details"]):
            # index 请求参数数量  suite_summary 请求参数
            if not suite_summary.get("name"):
                suite_summary["name"] = "test suite {}".format(index)
            for record in suite_summary.get("records"):
                # 获取所有请求参数&&返回值
                meta_data = record['meta_data']
                self.stringify_data(meta_data, 'request')
                self.stringify_data(meta_data, 'response')

        with io.open(html_report_template, "r", encoding='utf-8') as fp_r:
            template_content = fp_r.read()
            report_path = os.path.join(report_dir_path, html_report_name)
            with io.open(report_path, 'w', encoding='utf-8') as fp_w:
                rendered_content = Template(template_content).render(summary)
                fp_w.write(rendered_content)

        return report_path

    def stringify_data(self, meta_data, request_or_response):
        headers = meta_data[request_or_response]["headers"]

        request_or_response_dict = meta_data[request_or_response]
        basestring = (str, bytes)
        numeric_types = (int, float)
        for key, value in request_or_response_dict.items():
            if isinstance(value, list):
                value = json.dumps(value, indent=2, ensure_ascii=False)
            elif isinstance(value, bytes):
                try:
                    encoding = meta_data["response"].get("encoding")

                    if not encoding or encoding == "None":
                        encoding = "utf-8"

                    content_type = meta_data["response"]["content_type"]
                    if "image" in content_type:
                        meta_data["response"]["content_type"] = "image"
                        value = "data:{};base64,{}".format(
                            content_type,
                            b64encode(value).decode(encoding)
                        )
                    else:
                        value = escape(value.decode(encoding))
                except UnicodeDecodeError:
                    pass

            elif not isinstance(value, (basestring, numeric_types, Iterable)):
                value = repr(value)
            meta_data[request_or_response][key] = value
